# 
# win10 64bit下 python的chm文档出现乱码：
# 解决方案
# 打开IE浏览器，选择[查看->编码->自动选择]，然后重新打开该文档即可
# 若浏览器没有查看选项，自己想办法吧，肯定能弄出来

# Using Python as a Calculator
# 1.在py中,"/"表示的除法，结果为float。如果需要floor division(就像C那样，返回整数)
# 则需要用到 "//"。
# 简单例子就不举了，举一个负数的吧。[py]-11//4==-3

# 2."**"用于计算乘方
# 3."_"最后一个打印的表达式的值会分配给变量"_"
# 4.字符串赋值可以single quote/double quotes混用，但得明白什么情况下用什么，怎么用
# 5.字符串跨越多行，可以使用3个双引号  [py]"""..."""

# 6.字符串连接和快速赋值 [py]3*'ab'+"num" = 'abababnum'
#	注意上面，如果是这样[py]3*'ab' "num" = 'abnumabnumabnum',即若字串之间，仅仅有空格
#	则自动连接了。若是字符串变量和字符串连接，则必须使用加号了。不能空格连接

# 7.字符串可以使用负数下标。0代表第一个字符，-1代表最后一个字符。
#	我觉得这个负数下标的操作，有点类似C中-128 -> 127的char(我只说这个数据范围，即负数的128刚好比127
#	大1)
#	例如：[py]a = 'python';a[-6]==p,a[5]=n,a[-1]=n,(即下标范围在-len(a) < index < len(a)-1)
#	注：a[0:2] = 'py'(没有包括a[2]),因此操作范围相当于一个左闭又开区间
#	若是a[:]表示全部，a[2:]表示从a[2]到末尾，a[:6]不用我解释来了吧
#	提问：a[0:-1]是什么，自己想？还有一个奇葩的玩法a[-2:6]，但本质还是很上述讲的一致的
#	若a[100]则会报错，若是a[:100]则会智能的识别为到当前的最大值
#	若在某一段上，追加字符。例如[py]a[:2] + 'Ha' ;  则此表达式的返回为'pyHa'(注意，这个可不是给a赋值
#	别弄差了)

# 8.Lists
#	[py] a = [1,2,3,4]
#	当然，下标操作和7.中的字符串类似
#	【特殊】
#	Lists可以赋值，如a[2] = 5,或者a[2:4]=[8,0]
#	追加：a.append(35)，这样就把35追加为a的最后一个元素。append相对于a=a+[35]更加有效
#	获取Lists长度 [py]len(a)
#	也可以创建空List [py] result=[]

# 9.斐波那契数列：理解a和b同时赋值的操作
# a, b = 0, 1
# while b < 1000:
#     print(b, end=',')
#     a, b = b, a+b

# 10.in的用法
#	a = [1,2,3,4]
#	[py]5 in a 则会返回Fals
#	[py]2 in a 则会返回True，可以用于if条件判断
#	